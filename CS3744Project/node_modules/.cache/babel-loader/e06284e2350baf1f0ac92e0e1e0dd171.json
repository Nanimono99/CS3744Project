{"ast":null,"code":"import { useEffect, useRef, useCallback } from 'react';\nimport { doesIdentifierMatchKeyboardEvent } from '../utils/doesIdentifierMatchKeyboardEvent';\n/**\n * defaultOptions which will be merged with passed in options\n */\n\nvar defaultOptions = {\n  continuous: false,\n  when: true\n};\n/**\n * useKeys hook\n *\n * @param keysList\n * @param callback\n * @param opts\n */\n\nfunction useKeys(keysList, callback, options_) {\n  var options = Object.assign({}, defaultOptions, options_);\n  var target = options.target,\n      when = options.when,\n      continuous = options.continuous;\n  var savedCallback = useRef(callback);\n  /**\n   * PressedKeyMapping will do the bookkeeping the pressed keys\n   */\n\n  var pressedKeyMappingRef = useRef({});\n  var PressedKeyMapping = pressedKeyMappingRef.current;\n  /**\n   *  First useEffect is to remember the latest callback\n   */\n\n  useEffect(function () {\n    savedCallback.current = callback;\n  });\n  /**\n   * handleKeyDown\n   *\n   * @param   {KeyboardEvent}  event\n   * KeyDown event handler which will wrap the passed in callback\n   */\n\n  var handleKeyDown = useCallback(function (event) {\n    var pressedKeyIdentifier = null;\n    var areAllKeysFromListPressed = false; // First detect the key that was pressed;\n\n    keysList.forEach(function (identifier) {\n      if (doesIdentifierMatchKeyboardEvent(event, identifier)) {\n        PressedKeyMapping[identifier] = true;\n        pressedKeyIdentifier = identifier;\n      }\n    });\n\n    if (keysList.every(function (identifier) {\n      return Boolean(PressedKeyMapping[identifier]);\n    })) {\n      areAllKeysFromListPressed = true;\n    }\n\n    if (areAllKeysFromListPressed) {\n      if (savedCallback.current) {\n        savedCallback.current(event);\n      }\n      /**\n       * If not continuous\n       * disable identifier immediately\n       */\n\n\n      if (!continuous && pressedKeyIdentifier !== null) {\n        PressedKeyMapping[pressedKeyIdentifier] = false;\n      }\n    }\n  }, [keysList, continuous]);\n  /**\n   * [handleKeyUp]\n   *\n   * @param   {KeyboardEvent}  event\n   *\n   * KeyUp event handler which will update the keys pressed state in PressedKeyMapping\n   */\n\n  var handleKeyUp = useCallback(function (event) {\n    keysList.forEach(function (identifier) {\n      if (doesIdentifierMatchKeyboardEvent(event, identifier)) {\n        PressedKeyMapping[identifier] = undefined;\n      }\n    });\n  }, []);\n  /**\n   * Responsible for setting up the event listener and removing event listeners\n   */\n\n  useEffect(function () {\n    if (when && typeof window !== 'undefined') {\n      var targetNode_1 = target && target.current ? target.current : document;\n\n      if (targetNode_1) {\n        targetNode_1.addEventListener('keydown', handleKeyDown);\n        targetNode_1.addEventListener('keyup', handleKeyUp);\n      }\n\n      return function () {\n        if (targetNode_1) {\n          targetNode_1.removeEventListener('keydown', handleKeyDown);\n          targetNode_1.removeEventListener('keyup', handleKeyUp);\n        }\n      };\n    }\n  }, [when, target, keysList, handleKeyDown, handleKeyUp]);\n}\n\nexport { useKeys };","map":{"version":3,"names":["useEffect","useRef","useCallback","doesIdentifierMatchKeyboardEvent","defaultOptions","continuous","when","useKeys","keysList","callback","options_","options","Object","assign","target","savedCallback","pressedKeyMappingRef","PressedKeyMapping","current","handleKeyDown","event","pressedKeyIdentifier","areAllKeysFromListPressed","forEach","identifier","every","Boolean","handleKeyUp","undefined","window","targetNode_1","document","addEventListener","removeEventListener"],"sources":["C:/Users/ASUS/Desktop/ReactRouter2/ReactRouter/node_modules/rooks/dist/esm/hooks/useKeys.js"],"sourcesContent":["import { useEffect, useRef, useCallback } from 'react';\nimport { doesIdentifierMatchKeyboardEvent } from '../utils/doesIdentifierMatchKeyboardEvent';\n/**\n * defaultOptions which will be merged with passed in options\n */\nvar defaultOptions = {\n    continuous: false,\n    when: true,\n};\n/**\n * useKeys hook\n *\n * @param keysList\n * @param callback\n * @param opts\n */\nfunction useKeys(keysList, callback, options_) {\n    var options = Object.assign({}, defaultOptions, options_);\n    var target = options.target, when = options.when, continuous = options.continuous;\n    var savedCallback = useRef(callback);\n    /**\n     * PressedKeyMapping will do the bookkeeping the pressed keys\n     */\n    var pressedKeyMappingRef = useRef({});\n    var PressedKeyMapping = pressedKeyMappingRef.current;\n    /**\n     *  First useEffect is to remember the latest callback\n     */\n    useEffect(function () {\n        savedCallback.current = callback;\n    });\n    /**\n     * handleKeyDown\n     *\n     * @param   {KeyboardEvent}  event\n     * KeyDown event handler which will wrap the passed in callback\n     */\n    var handleKeyDown = useCallback(function (event) {\n        var pressedKeyIdentifier = null;\n        var areAllKeysFromListPressed = false;\n        // First detect the key that was pressed;\n        keysList.forEach(function (identifier) {\n            if (doesIdentifierMatchKeyboardEvent(event, identifier)) {\n                PressedKeyMapping[identifier] = true;\n                pressedKeyIdentifier = identifier;\n            }\n        });\n        if (keysList.every(function (identifier) { return Boolean(PressedKeyMapping[identifier]); })) {\n            areAllKeysFromListPressed = true;\n        }\n        if (areAllKeysFromListPressed) {\n            if (savedCallback.current) {\n                savedCallback.current(event);\n            }\n            /**\n             * If not continuous\n             * disable identifier immediately\n             */\n            if (!continuous && pressedKeyIdentifier !== null) {\n                PressedKeyMapping[pressedKeyIdentifier] = false;\n            }\n        }\n    }, [keysList, continuous]);\n    /**\n     * [handleKeyUp]\n     *\n     * @param   {KeyboardEvent}  event\n     *\n     * KeyUp event handler which will update the keys pressed state in PressedKeyMapping\n     */\n    var handleKeyUp = useCallback(function (event) {\n        keysList.forEach(function (identifier) {\n            if (doesIdentifierMatchKeyboardEvent(event, identifier)) {\n                PressedKeyMapping[identifier] = undefined;\n            }\n        });\n    }, []);\n    /**\n     * Responsible for setting up the event listener and removing event listeners\n     */\n    useEffect(function () {\n        if (when && typeof window !== 'undefined') {\n            var targetNode_1 = target && target.current ? target.current : document;\n            if (targetNode_1) {\n                targetNode_1.addEventListener('keydown', handleKeyDown);\n                targetNode_1.addEventListener('keyup', handleKeyUp);\n            }\n            return function () {\n                if (targetNode_1) {\n                    targetNode_1.removeEventListener('keydown', handleKeyDown);\n                    targetNode_1.removeEventListener('keyup', handleKeyUp);\n                }\n            };\n        }\n    }, [when, target, keysList, handleKeyDown, handleKeyUp]);\n}\nexport { useKeys };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}