{"ast":null,"code":"import { useEffect, useCallback, useState } from 'react';\nvar config = {\n  root: null,\n  rootMargin: '0px 0px 0px 0px',\n  threshold: [0, 1]\n};\n/**\n *\n * useIntersectionObserverRef hook\n *\n * Returns a mutation observer for a React Ref and fires a callback\n *\n * @param {IntersectionObserverCallback} callback Function that needs to be fired on mutation\n * @param {IntersectionObserverInit} options\n */\n\nfunction useIntersectionObserverRef(callback, options) {\n  if (options === void 0) {\n    options = config;\n  }\n\n  var _a = options.root,\n      root = _a === void 0 ? null : _a,\n      rootMargin = options.rootMargin,\n      threshold = options.threshold;\n\n  var _b = useState(null),\n      node = _b[0],\n      setNode = _b[1];\n\n  useEffect(function () {\n    // Create an observer instance linked to the callback function\n    if (node && callback) {\n      var observer_1 = new IntersectionObserver(callback, options); // Start observing the target node for configured mutations\n\n      observer_1.observe(node);\n      return function () {\n        observer_1.disconnect();\n      };\n    }\n  }, [node, callback, root, rootMargin, threshold]);\n  var ref = useCallback(function (node) {\n    setNode(node);\n  }, []);\n  return [ref];\n}\n\nexport { useIntersectionObserverRef };","map":{"version":3,"names":["useEffect","useCallback","useState","config","root","rootMargin","threshold","useIntersectionObserverRef","callback","options","_a","_b","node","setNode","observer_1","IntersectionObserver","observe","disconnect","ref"],"sources":["C:/Users/ASUS/Desktop/ReactRouter2/ReactRouter/node_modules/rooks/dist/esm/hooks/useIntersectionObserverRef.js"],"sourcesContent":["import { useEffect, useCallback, useState } from 'react';\nvar config = {\n    root: null,\n    rootMargin: '0px 0px 0px 0px',\n    threshold: [0, 1],\n};\n/**\n *\n * useIntersectionObserverRef hook\n *\n * Returns a mutation observer for a React Ref and fires a callback\n *\n * @param {IntersectionObserverCallback} callback Function that needs to be fired on mutation\n * @param {IntersectionObserverInit} options\n */\nfunction useIntersectionObserverRef(callback, options) {\n    if (options === void 0) { options = config; }\n    var _a = options.root, root = _a === void 0 ? null : _a, rootMargin = options.rootMargin, threshold = options.threshold;\n    var _b = useState(null), node = _b[0], setNode = _b[1];\n    useEffect(function () {\n        // Create an observer instance linked to the callback function\n        if (node && callback) {\n            var observer_1 = new IntersectionObserver(callback, options);\n            // Start observing the target node for configured mutations\n            observer_1.observe(node);\n            return function () {\n                observer_1.disconnect();\n            };\n        }\n    }, [node, callback, root, rootMargin, threshold]);\n    var ref = useCallback(function (node) {\n        setNode(node);\n    }, []);\n    return [ref];\n}\nexport { useIntersectionObserverRef };\n"],"mappings":"AAAA,SAASA,SAAT,EAAoBC,WAApB,EAAiCC,QAAjC,QAAiD,OAAjD;AACA,IAAIC,MAAM,GAAG;EACTC,IAAI,EAAE,IADG;EAETC,UAAU,EAAE,iBAFH;EAGTC,SAAS,EAAE,CAAC,CAAD,EAAI,CAAJ;AAHF,CAAb;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,0BAAT,CAAoCC,QAApC,EAA8CC,OAA9C,EAAuD;EACnD,IAAIA,OAAO,KAAK,KAAK,CAArB,EAAwB;IAAEA,OAAO,GAAGN,MAAV;EAAmB;;EAC7C,IAAIO,EAAE,GAAGD,OAAO,CAACL,IAAjB;EAAA,IAAuBA,IAAI,GAAGM,EAAE,KAAK,KAAK,CAAZ,GAAgB,IAAhB,GAAuBA,EAArD;EAAA,IAAyDL,UAAU,GAAGI,OAAO,CAACJ,UAA9E;EAAA,IAA0FC,SAAS,GAAGG,OAAO,CAACH,SAA9G;;EACA,IAAIK,EAAE,GAAGT,QAAQ,CAAC,IAAD,CAAjB;EAAA,IAAyBU,IAAI,GAAGD,EAAE,CAAC,CAAD,CAAlC;EAAA,IAAuCE,OAAO,GAAGF,EAAE,CAAC,CAAD,CAAnD;;EACAX,SAAS,CAAC,YAAY;IAClB;IACA,IAAIY,IAAI,IAAIJ,QAAZ,EAAsB;MAClB,IAAIM,UAAU,GAAG,IAAIC,oBAAJ,CAAyBP,QAAzB,EAAmCC,OAAnC,CAAjB,CADkB,CAElB;;MACAK,UAAU,CAACE,OAAX,CAAmBJ,IAAnB;MACA,OAAO,YAAY;QACfE,UAAU,CAACG,UAAX;MACH,CAFD;IAGH;EACJ,CAVQ,EAUN,CAACL,IAAD,EAAOJ,QAAP,EAAiBJ,IAAjB,EAAuBC,UAAvB,EAAmCC,SAAnC,CAVM,CAAT;EAWA,IAAIY,GAAG,GAAGjB,WAAW,CAAC,UAAUW,IAAV,EAAgB;IAClCC,OAAO,CAACD,IAAD,CAAP;EACH,CAFoB,EAElB,EAFkB,CAArB;EAGA,OAAO,CAACM,GAAD,CAAP;AACH;;AACD,SAASX,0BAAT"},"metadata":{},"sourceType":"module"}