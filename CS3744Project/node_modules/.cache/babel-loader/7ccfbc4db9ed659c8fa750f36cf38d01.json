{"ast":null,"code":"import { useEffect, useState, useCallback, useRef, useMemo } from 'react';\nimport { doesIdentifierMatchKeyboardEvent } from '../utils/doesIdentifierMatchKeyboardEvent';\nvar defaultOptions = {\n  eventTypes: ['keydown'],\n  when: true\n};\n/**\n * useKeyRef hook\n *\n * Fires a callback on keyboard events like keyDown, keyPress and keyUp\n *\n * @param {[string|number]} keyList\n * @param {Function} callback\n * @param {Options} options\n * @returns callbackRef\n */\n\nfunction useKeyRef(input, callback, options_) {\n  var _a = useState(null),\n      targetNode = _a[0],\n      setTargetNode = _a[1];\n\n  var ref = useCallback(function (targetNode) {\n    setTargetNode(targetNode);\n  }, []);\n  var keyList = useMemo(function () {\n    if (Array.isArray(input)) {\n      return input;\n    } else {\n      return [input];\n    }\n  }, [input]);\n  var options = Object.assign({}, defaultOptions, options_);\n  var when = options.when,\n      eventTypes = options.eventTypes;\n  var callbackRef = useRef(callback);\n  useEffect(function () {\n    callbackRef.current = callback;\n  });\n  var handle = useCallback(function (e) {\n    if (keyList.some(function (identifier) {\n      return doesIdentifierMatchKeyboardEvent(e, identifier);\n    })) {\n      callbackRef.current(e);\n    }\n  }, [keyList]);\n  useEffect(function () {\n    if (when && targetNode) {\n      eventTypes.forEach(function (eventType) {\n        targetNode && targetNode.addEventListener(eventType, handle);\n      });\n      return function () {\n        eventTypes.forEach(function (eventType) {\n          targetNode && targetNode.removeEventListener(eventType, handle);\n        });\n      };\n    }\n  }, [targetNode, when, eventTypes, keyList, handle]);\n  return ref;\n}\n\nexport { useKeyRef };","map":{"version":3,"names":["useEffect","useState","useCallback","useRef","useMemo","doesIdentifierMatchKeyboardEvent","defaultOptions","eventTypes","when","useKeyRef","input","callback","options_","_a","targetNode","setTargetNode","ref","keyList","Array","isArray","options","Object","assign","callbackRef","current","handle","e","some","identifier","forEach","eventType","addEventListener","removeEventListener"],"sources":["C:/Users/ASUS/Desktop/ReactRouter2/ReactRouter/node_modules/rooks/dist/esm/hooks/useKeyRef.js"],"sourcesContent":["import { useEffect, useState, useCallback, useRef, useMemo } from 'react';\nimport { doesIdentifierMatchKeyboardEvent } from '../utils/doesIdentifierMatchKeyboardEvent';\nvar defaultOptions = {\n    eventTypes: ['keydown'],\n    when: true,\n};\n/**\n * useKeyRef hook\n *\n * Fires a callback on keyboard events like keyDown, keyPress and keyUp\n *\n * @param {[string|number]} keyList\n * @param {Function} callback\n * @param {Options} options\n * @returns callbackRef\n */\nfunction useKeyRef(input, callback, options_) {\n    var _a = useState(null), targetNode = _a[0], setTargetNode = _a[1];\n    var ref = useCallback(function (targetNode) {\n        setTargetNode(targetNode);\n    }, []);\n    var keyList = useMemo(function () {\n        if (Array.isArray(input)) {\n            return input;\n        }\n        else {\n            return [input];\n        }\n    }, [input]);\n    var options = Object.assign({}, defaultOptions, options_);\n    var when = options.when, eventTypes = options.eventTypes;\n    var callbackRef = useRef(callback);\n    useEffect(function () {\n        callbackRef.current = callback;\n    });\n    var handle = useCallback(function (e) {\n        if (keyList.some(function (identifier) {\n            return doesIdentifierMatchKeyboardEvent(e, identifier);\n        })) {\n            callbackRef.current(e);\n        }\n    }, [keyList]);\n    useEffect(function () {\n        if (when && targetNode) {\n            eventTypes.forEach(function (eventType) {\n                targetNode && targetNode.addEventListener(eventType, handle);\n            });\n            return function () {\n                eventTypes.forEach(function (eventType) {\n                    targetNode && targetNode.removeEventListener(eventType, handle);\n                });\n            };\n        }\n    }, [targetNode, when, eventTypes, keyList, handle]);\n    return ref;\n}\nexport { useKeyRef };\n"],"mappings":"AAAA,SAASA,SAAT,EAAoBC,QAApB,EAA8BC,WAA9B,EAA2CC,MAA3C,EAAmDC,OAAnD,QAAkE,OAAlE;AACA,SAASC,gCAAT,QAAiD,2CAAjD;AACA,IAAIC,cAAc,GAAG;EACjBC,UAAU,EAAE,CAAC,SAAD,CADK;EAEjBC,IAAI,EAAE;AAFW,CAArB;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,SAAT,CAAmBC,KAAnB,EAA0BC,QAA1B,EAAoCC,QAApC,EAA8C;EAC1C,IAAIC,EAAE,GAAGZ,QAAQ,CAAC,IAAD,CAAjB;EAAA,IAAyBa,UAAU,GAAGD,EAAE,CAAC,CAAD,CAAxC;EAAA,IAA6CE,aAAa,GAAGF,EAAE,CAAC,CAAD,CAA/D;;EACA,IAAIG,GAAG,GAAGd,WAAW,CAAC,UAAUY,UAAV,EAAsB;IACxCC,aAAa,CAACD,UAAD,CAAb;EACH,CAFoB,EAElB,EAFkB,CAArB;EAGA,IAAIG,OAAO,GAAGb,OAAO,CAAC,YAAY;IAC9B,IAAIc,KAAK,CAACC,OAAN,CAAcT,KAAd,CAAJ,EAA0B;MACtB,OAAOA,KAAP;IACH,CAFD,MAGK;MACD,OAAO,CAACA,KAAD,CAAP;IACH;EACJ,CAPoB,EAOlB,CAACA,KAAD,CAPkB,CAArB;EAQA,IAAIU,OAAO,GAAGC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBhB,cAAlB,EAAkCM,QAAlC,CAAd;EACA,IAAIJ,IAAI,GAAGY,OAAO,CAACZ,IAAnB;EAAA,IAAyBD,UAAU,GAAGa,OAAO,CAACb,UAA9C;EACA,IAAIgB,WAAW,GAAGpB,MAAM,CAACQ,QAAD,CAAxB;EACAX,SAAS,CAAC,YAAY;IAClBuB,WAAW,CAACC,OAAZ,GAAsBb,QAAtB;EACH,CAFQ,CAAT;EAGA,IAAIc,MAAM,GAAGvB,WAAW,CAAC,UAAUwB,CAAV,EAAa;IAClC,IAAIT,OAAO,CAACU,IAAR,CAAa,UAAUC,UAAV,EAAsB;MACnC,OAAOvB,gCAAgC,CAACqB,CAAD,EAAIE,UAAJ,CAAvC;IACH,CAFG,CAAJ,EAEI;MACAL,WAAW,CAACC,OAAZ,CAAoBE,CAApB;IACH;EACJ,CANuB,EAMrB,CAACT,OAAD,CANqB,CAAxB;EAOAjB,SAAS,CAAC,YAAY;IAClB,IAAIQ,IAAI,IAAIM,UAAZ,EAAwB;MACpBP,UAAU,CAACsB,OAAX,CAAmB,UAAUC,SAAV,EAAqB;QACpChB,UAAU,IAAIA,UAAU,CAACiB,gBAAX,CAA4BD,SAA5B,EAAuCL,MAAvC,CAAd;MACH,CAFD;MAGA,OAAO,YAAY;QACflB,UAAU,CAACsB,OAAX,CAAmB,UAAUC,SAAV,EAAqB;UACpChB,UAAU,IAAIA,UAAU,CAACkB,mBAAX,CAA+BF,SAA/B,EAA0CL,MAA1C,CAAd;QACH,CAFD;MAGH,CAJD;IAKH;EACJ,CAXQ,EAWN,CAACX,UAAD,EAAaN,IAAb,EAAmBD,UAAnB,EAA+BU,OAA/B,EAAwCQ,MAAxC,CAXM,CAAT;EAYA,OAAOT,GAAP;AACH;;AACD,SAASP,SAAT"},"metadata":{},"sourceType":"module"}