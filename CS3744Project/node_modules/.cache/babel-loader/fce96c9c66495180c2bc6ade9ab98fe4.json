{"ast":null,"code":"import { useMemo } from 'react';\n/**\n * Credit to material-ui for this snippet\n */\n\nfunction setRef(ref, value) {\n  if (typeof ref === 'function') {\n    ref(value);\n  } else if (ref) {\n    ref.current = value;\n  }\n}\n/**\n * useForkRef\n * Joins refs together and returns a combination of the two as a new ref\n *\n * @param refA\n * @param refB\n */\n\n\nfunction useForkRef(refA, refB) {\n  /**\n   * This will create a new function if the ref props change and are defined.\n   * This means react will call the old forkRef with `null` and the new forkRef\n   * with the ref. Cleanup naturally emerges from this behavior\n   */\n  return useMemo(function () {\n    if (refA == null && refB == null) {\n      return null;\n    }\n\n    return function (refValue) {\n      setRef(refA, refValue);\n      setRef(refB, refValue);\n    };\n  }, [refA, refB]);\n}\n\nexport { useForkRef };","map":{"version":3,"names":["useMemo","setRef","ref","value","current","useForkRef","refA","refB","refValue"],"sources":["C:/Users/ASUS/Desktop/ReactRouter2/ReactRouter/node_modules/rooks/dist/esm/hooks/useForkRef.js"],"sourcesContent":["import { useMemo } from 'react';\n/**\n * Credit to material-ui for this snippet\n */\nfunction setRef(ref, value) {\n    if (typeof ref === 'function') {\n        ref(value);\n    }\n    else if (ref) {\n        ref.current = value;\n    }\n}\n/**\n * useForkRef\n * Joins refs together and returns a combination of the two as a new ref\n *\n * @param refA\n * @param refB\n */\nfunction useForkRef(refA, refB) {\n    /**\n     * This will create a new function if the ref props change and are defined.\n     * This means react will call the old forkRef with `null` and the new forkRef\n     * with the ref. Cleanup naturally emerges from this behavior\n     */\n    return useMemo(function () {\n        if (refA == null && refB == null) {\n            return null;\n        }\n        return function (refValue) {\n            setRef(refA, refValue);\n            setRef(refB, refValue);\n        };\n    }, [refA, refB]);\n}\nexport { useForkRef };\n"],"mappings":"AAAA,SAASA,OAAT,QAAwB,OAAxB;AACA;AACA;AACA;;AACA,SAASC,MAAT,CAAgBC,GAAhB,EAAqBC,KAArB,EAA4B;EACxB,IAAI,OAAOD,GAAP,KAAe,UAAnB,EAA+B;IAC3BA,GAAG,CAACC,KAAD,CAAH;EACH,CAFD,MAGK,IAAID,GAAJ,EAAS;IACVA,GAAG,CAACE,OAAJ,GAAcD,KAAd;EACH;AACJ;AACD;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASE,UAAT,CAAoBC,IAApB,EAA0BC,IAA1B,EAAgC;EAC5B;AACJ;AACA;AACA;AACA;EACI,OAAOP,OAAO,CAAC,YAAY;IACvB,IAAIM,IAAI,IAAI,IAAR,IAAgBC,IAAI,IAAI,IAA5B,EAAkC;MAC9B,OAAO,IAAP;IACH;;IACD,OAAO,UAAUC,QAAV,EAAoB;MACvBP,MAAM,CAACK,IAAD,EAAOE,QAAP,CAAN;MACAP,MAAM,CAACM,IAAD,EAAOC,QAAP,CAAN;IACH,CAHD;EAIH,CARa,EAQX,CAACF,IAAD,EAAOC,IAAP,CARW,CAAd;AASH;;AACD,SAASF,UAAT"},"metadata":{},"sourceType":"module"}